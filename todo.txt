complete update for changing user role from user section
16/07/2021

1. /*
RolePermissionAssignedActionSubscriber.php
ensure permission isn't already assigned before assigned to avoid duplicate entry error
*/

/*
Features

1. MVC design architecture
2. Custom PHP Framework
3. FormBuilder Component
4. PSR Caching Component
5. Session Management Component (requires Cookie Manager component)
6. Flash Messaging Component (requires Session Management Component)
7. PSR Logger component
8. Cookie Manager Component
9. Templating Component
10. Mailer component
11. UserManager Component (requires Authentication component)
12. Authentication Component
13. DataView Component
14.
*/
06/08/2021

1. render an alert on all main channel (index route) stating whether a route is unprotected ie has no permission can do this
using PHP Reflection to get all methods and check the a database if the route exists

2. create a fillable property for each model listing all fillable fields

use MagmaCore\Bundler\Bundler;
use MagmaCore\Blank\BlankBundler;
use MagmaCore\Container\ContainerFactory;

//$bundler = new Bundler((new ContainerFactory())->create(), ROOT_PATH);
//$bundler
//    ->addBundle(BlankBundler::register())
//    ->boot($bundler);
//
//$blanker = $bundler->getBundle('blanker');
//$blanker->set('name', 'Ricardo Miller');
//echo $blanker->get('name');
//var_dump($blanker);
//die;

use MagmaCore\DataObjectLayer\DataLayerClientFacade;
$client = new DataLayerClientFacade('plugin', 'user_role', 'id');

$all = $client->getClientRepository();
var_dump($all->get());
die;

php bin/console magma:create test_controller

use MagmaCore\Utility\Yaml;
// use MagmaCore\Bundler\Bundler;
use MagmaCore\Logger\LogLevel;
// use MagmaCore\Blank\BlankBundler;
use MagmaCore\Base\BaseApplication;
use MagmaCore\Http\Request;
// use MagmaCore\Container\ContainerFactory;

// $bundler = new Bundler((new ContainerFactory())->create(), ROOT_PATH);
// $bundler->addBundle(BlankBundler::register())->boot($bundler);

// $blanker = $bundler->getBundle('blanker');
// $blanker->set('name', 'Ricardo Miller');
// echo $blanker->get('name');
// var_dump($blanker);
// die;
// $request = new Request('http://bbc.co.uk');
// $request->execute();
// $response = $request->checkResponseForContent();
// var_dump($response);
// die;


$path = '';
$data = null;
$headers = [];

$read = new CurlApi(
    'https://api.publicapis.org/',
    'random?auth=null',
    $headers
);
$data = $read->show()->response()->onClose()->exec();
var_dump($data);
die;

object(MagmaCore\DataObjectLayer\Drivers\MysqlDatabaseConnection)#242 (3) {
  ["pdoDriver":protected]=>
  string(5) "mysql"
  ["environment":"MagmaCore\DataObjectLayer\Drivers\MysqlDatabaseConnection":private]=>
  object(MagmaCore\DataObjectLayer\DataLayerEnvironment)#234 (2) {
    ["environmentConfiguration":protected]=>
    object(MagmaCore\DataObjectLayer\DataLayerConfiguration)#238 (1) {
      ["dataLayerConfiguration":"MagmaCore\DataObjectLayer\DataLayerConfiguration":private]=>
      NULL
    }
    ["currentDriver":"MagmaCore\DataObjectLayer\DataLayerEnvironment":private]=>
    string(5) "mysql"
  }
  ["params":protected]=>
  array(4) {
    [20]=>
    bool(false)
    [12]=>
    bool(true)
    [3]=>
    int(2)
    [19]=>
    int(2)
  }
  ["dbh":"MagmaCore\DataObjectLayer\Drivers\AbstractDatabaseDriver":private]=>
  uninitialized(?object)
}

$create = new WidgetFactory;
$widget = $create->create(ClientRepositoryFactory::class, ['active_now_widget' => ['table' => 'user', 'table_id' => 'id']]);
$widget = $create->create(ClientRepositoryFactory::class, ['bounce_rate_widget' => ['table' => 'user', 'table_id' => 'id']]);

    
var_dump($widget->renderWidget());
var_dump($widget->renderWidget());
die;

    /**
     * This will prevent the active user  within the session from deleting and trashing their own account.
     * 
     * if the token route is active and it matches the userID from the current session and any 
     * of 4 defined action is being carried out. Then we want to prevent. The action from completing
     * We must also take into account when deleting via bulk. As this will allow the user to be trash
     *
     * @return void
     */
    public function disableDeleteCurrentUser(BeforeControllerActionEvent $event)
    {
        $userID = $event->getObject()->getSession()->get('user_id');
        $token = $event->getObject()->thisRouteID();
        $action = $event->getMethod();
        $controller = $event->getObject()->thisRouteController();
        $postData = $event->getObject()->formBuilder->getData();
        $user = $event->getObject()->repository->getUser($userID);

        if (
            array_key_exists('bulkTrash-' . $controller, $postData) || 
            array_key_exists('bulkClone-' . $controller, $postData)) {
            if (in_array($userID, $postData['id'])) {
                $event->getObject()->flashMessage(sprintf('The action was reject. Because an item in your bulk selection is yourself [id = %s]', $userID), $event->getObject()->flashWarning());
                $event->getObject()->redirect('/admin/user/index');
            }
        } else if (isset($token) && $token === $userID && in_array($action, self::PREVENTION_ROUTES)) {
            $event->getObject()->flashMessage(sprintf('The action was reject. The action is not permitted on yourself  [id = %s]', $userID), $event->getObject()->flashWarning());
            $event->getObject()->redirect('/admin/user/index');
        }

                
    }

        /**
         * t1 = users
         * t2 = user_preferences
         * t3 = user_metadata
         * t4 = user_note
         *         $sql = "SELECT t2.permission_name FROM role_permission as t1 JOIN permissions as t2 ON t1.permission_id = t2.id WHERE t1.role_id = :role_id";

         */
        //$sql = 'SELECT * FROM users, user_metadata, user_preferences, user_note, user_role WHERE users.id = user_metadata.user_id AND user_preferences.user_id AND user_note.user_id AND user_role.user_id AND users.id = 1270';
        // $sql = 'SELECT * 
        // FROM users 
        //     INNER JOIN user_preferences 
        //         USING (user_id) 
        //     INNER JOIN user_metadata 
        //         USING (user_id) 
        //     INNER JOIN user_note 
        //         USING (user_id) 
        //     ORDER BY id';


        // $sql = 'SELECT * FROM 
        // users t1 
        //     LEFT JOIN user_preferences t2 
        //         ON t1.id = t2.user_id
        //     LEFT JOIN user_metadata t3
        //         ON t1.id = t3.user_id
        //     LEFT JOIN user_note t4
        //         ON t1.id = t4.user_id
        //     LEFT JOIN user_role t5
        //         ON t1.id = t5.user_id
        //     WHERE t1.id = :id
        // ';


        // $data = $this->repository->getRepo()->getEm()->getCrud()->rawQuery($sql, ['id' => 1270], 'fetch_all');

        $relationship = $this->repository->relationship(function($baseModel){
            return $baseModel
                ->addParent($this->repository)->select('t1') /* optional second argument $selectors can select what to return */
                ->addChild(UserMetadataModel::class, fn($baseModel, $model) => $baseModel->leftJoin($model::FOREIGNKEY, 't2'))
                ->addChild(UserNoteModel::class, fn($baseModel, $model) => $baseModel->leftJoin($model::FOREIGNKEY, 't3'))
                ->addChild(UserPreferenceModel::class, fn($baseModel, $model) => $baseModel->leftJoin($model::FOREIGNKEY, 't4'))
                ->addChild(UserRoleModel::class, fn($baseModel, $model) => $baseModel->leftJoin($model::FOREIGNKEY, 't5'))
                ->where(1270) /* optional use where() when a single item is required. argument required in item ID */
                ->getRelations(); /* must return this method at the end */
        });

        // $this->dump($relationship);
        echo $this->restful->response($relationship);
        die;

<select id="country" name="country">
    <option>select country</option>
    <option value="AF">Afghanistan</option>
    <option value="AX">Aland Islands</option>
    <option value="AL">Albania</option>
    <option value="DZ">Algeria</option>
    <option value="AS">American Samoa</option>
    <option value="AD">Andorra</option>
    <option value="AO">Angola</option>
    <option value="AI">Anguilla</option>
    <option value="AQ">Antarctica</option>
    <option value="AG">Antigua and Barbuda</option>
    <option value="AR">Argentina</option>
    <option value="AM">Armenia</option>
    <option value="AW">Aruba</option>
    <option value="AU">Australia</option>
    <option value="AT">Austria</option>
    <option value="AZ">Azerbaijan</option>
    <option value="BS">Bahamas</option>
    <option value="BH">Bahrain</option>
    <option value="BD">Bangladesh</option>
    <option value="BB">Barbados</option>
    <option value="BY">Belarus</option>
    <option value="BE">Belgium</option>
    <option value="BZ">Belize</option>
    <option value="BJ">Benin</option>
    <option value="BM">Bermuda</option>
    <option value="BT">Bhutan</option>
    <option value="BO">Bolivia</option>
    <option value="BQ">Bonaire, Sint Eustatius and Saba</option>
    <option value="BA">Bosnia and Herzegovina</option>
    <option value="BW">Botswana</option>
    <option value="BV">Bouvet Island</option>
    <option value="BR">Brazil</option>
    <option value="IO">British Indian Ocean Territory</option>
    <option value="BN">Brunei Darussalam</option>
    <option value="BG">Bulgaria</option>
    <option value="BF">Burkina Faso</option>
    <option value="BI">Burundi</option>
    <option value="KH">Cambodia</option>
    <option value="CM">Cameroon</option>
    <option value="CA">Canada</option>
    <option value="CV">Cape Verde</option>
    <option value="KY">Cayman Islands</option>
    <option value="CF">Central African Republic</option>
    <option value="TD">Chad</option>
    <option value="CL">Chile</option>
    <option value="CN">China</option>
    <option value="CX">Christmas Island</option>
    <option value="CC">Cocos (Keeling) Islands</option>
    <option value="CO">Colombia</option>
    <option value="KM">Comoros</option>
    <option value="CG">Congo</option>
    <option value="CD">Congo, Democratic Republic of the Congo</option>
    <option value="CK">Cook Islands</option>
    <option value="CR">Costa Rica</option>
    <option value="CI">Cote D'Ivoire</option>
    <option value="HR">Croatia</option>
    <option value="CU">Cuba</option>
    <option value="CW">Curacao</option>
    <option value="CY">Cyprus</option>
    <option value="CZ">Czech Republic</option>
    <option value="DK">Denmark</option>
    <option value="DJ">Djibouti</option>
    <option value="DM">Dominica</option>
    <option value="DO">Dominican Republic</option>
    <option value="EC">Ecuador</option>
    <option value="EG">Egypt</option>
    <option value="SV">El Salvador</option>
    <option value="GQ">Equatorial Guinea</option>
    <option value="ER">Eritrea</option>
    <option value="EE">Estonia</option>
    <option value="ET">Ethiopia</option>
    <option value="FK">Falkland Islands (Malvinas)</option>
    <option value="FO">Faroe Islands</option>
    <option value="FJ">Fiji</option>
    <option value="FI">Finland</option>
    <option value="FR">France</option>
    <option value="GF">French Guiana</option>
    <option value="PF">French Polynesia</option>
    <option value="TF">French Southern Territories</option>
    <option value="GA">Gabon</option>
    <option value="GM">Gambia</option>
    <option value="GE">Georgia</option>
    <option value="DE">Germany</option>
    <option value="GH">Ghana</option>
    <option value="GI">Gibraltar</option>
    <option value="GR">Greece</option>
    <option value="GL">Greenland</option>
    <option value="GD">Grenada</option>
    <option value="GP">Guadeloupe</option>
    <option value="GU">Guam</option>
    <option value="GT">Guatemala</option>
    <option value="GG">Guernsey</option>
    <option value="GN">Guinea</option>
    <option value="GW">Guinea-Bissau</option>
    <option value="GY">Guyana</option>
    <option value="HT">Haiti</option>
    <option value="HM">Heard Island and Mcdonald Islands</option>
    <option value="VA">Holy See (Vatican City State)</option>
    <option value="HN">Honduras</option>
    <option value="HK">Hong Kong</option>
    <option value="HU">Hungary</option>
    <option value="IS">Iceland</option>
    <option value="IN">India</option>
    <option value="ID">Indonesia</option>
    <option value="IR">Iran, Islamic Republic of</option>
    <option value="IQ">Iraq</option>
    <option value="IE">Ireland</option>
    <option value="IM">Isle of Man</option>
    <option value="IL">Israel</option>
    <option value="IT">Italy</option>
    <option value="JM">Jamaica</option>
    <option value="JP">Japan</option>
    <option value="JE">Jersey</option>
    <option value="JO">Jordan</option>
    <option value="KZ">Kazakhstan</option>
    <option value="KE">Kenya</option>
    <option value="KI">Kiribati</option>
    <option value="KP">Korea, Democratic People's Republic of</option>
    <option value="KR">Korea, Republic of</option>
    <option value="XK">Kosovo</option>
    <option value="KW">Kuwait</option>
    <option value="KG">Kyrgyzstan</option>
    <option value="LA">Lao People's Democratic Republic</option>
    <option value="LV">Latvia</option>
    <option value="LB">Lebanon</option>
    <option value="LS">Lesotho</option>
    <option value="LR">Liberia</option>
    <option value="LY">Libyan Arab Jamahiriya</option>
    <option value="LI">Liechtenstein</option>
    <option value="LT">Lithuania</option>
    <option value="LU">Luxembourg</option>
    <option value="MO">Macao</option>
    <option value="MK">Macedonia, the Former Yugoslav Republic of</option>
    <option value="MG">Madagascar</option>
    <option value="MW">Malawi</option>
    <option value="MY">Malaysia</option>
    <option value="MV">Maldives</option>
    <option value="ML">Mali</option>
    <option value="MT">Malta</option>
    <option value="MH">Marshall Islands</option>
    <option value="MQ">Martinique</option>
    <option value="MR">Mauritania</option>
    <option value="MU">Mauritius</option>
    <option value="YT">Mayotte</option>
    <option value="MX">Mexico</option>
    <option value="FM">Micronesia, Federated States of</option>
    <option value="MD">Moldova, Republic of</option>
    <option value="MC">Monaco</option>
    <option value="MN">Mongolia</option>
    <option value="ME">Montenegro</option>
    <option value="MS">Montserrat</option>
    <option value="MA">Morocco</option>
    <option value="MZ">Mozambique</option>
    <option value="MM">Myanmar</option>
    <option value="NA">Namibia</option>
    <option value="NR">Nauru</option>
    <option value="NP">Nepal</option>
    <option value="NL">Netherlands</option>
    <option value="AN">Netherlands Antilles</option>
    <option value="NC">New Caledonia</option>
    <option value="NZ">New Zealand</option>
    <option value="NI">Nicaragua</option>
    <option value="NE">Niger</option>
    <option value="NG">Nigeria</option>
    <option value="NU">Niue</option>
    <option value="NF">Norfolk Island</option>
    <option value="MP">Northern Mariana Islands</option>
    <option value="NO">Norway</option>
    <option value="OM">Oman</option>
    <option value="PK">Pakistan</option>
    <option value="PW">Palau</option>
    <option value="PS">Palestinian Territory, Occupied</option>
    <option value="PA">Panama</option>
    <option value="PG">Papua New Guinea</option>
    <option value="PY">Paraguay</option>
    <option value="PE">Peru</option>
    <option value="PH">Philippines</option>
    <option value="PN">Pitcairn</option>
    <option value="PL">Poland</option>
    <option value="PT">Portugal</option>
    <option value="PR">Puerto Rico</option>
    <option value="QA">Qatar</option>
    <option value="RE">Reunion</option>
    <option value="RO">Romania</option>
    <option value="RU">Russian Federation</option>
    <option value="RW">Rwanda</option>
    <option value="BL">Saint Barthelemy</option>
    <option value="SH">Saint Helena</option>
    <option value="KN">Saint Kitts and Nevis</option>
    <option value="LC">Saint Lucia</option>
    <option value="MF">Saint Martin</option>
    <option value="PM">Saint Pierre and Miquelon</option>
    <option value="VC">Saint Vincent and the Grenadines</option>
    <option value="WS">Samoa</option>
    <option value="SM">San Marino</option>
    <option value="ST">Sao Tome and Principe</option>
    <option value="SA">Saudi Arabia</option>
    <option value="SN">Senegal</option>
    <option value="RS">Serbia</option>
    <option value="CS">Serbia and Montenegro</option>
    <option value="SC">Seychelles</option>
    <option value="SL">Sierra Leone</option>
    <option value="SG">Singapore</option>
    <option value="SX">Sint Maarten</option>
    <option value="SK">Slovakia</option>
    <option value="SI">Slovenia</option>
    <option value="SB">Solomon Islands</option>
    <option value="SO">Somalia</option>
    <option value="ZA">South Africa</option>
    <option value="GS">South Georgia and the South Sandwich Islands</option>
    <option value="SS">South Sudan</option>
    <option value="ES">Spain</option>
    <option value="LK">Sri Lanka</option>
    <option value="SD">Sudan</option>
    <option value="SR">Suriname</option>
    <option value="SJ">Svalbard and Jan Mayen</option>
    <option value="SZ">Swaziland</option>
    <option value="SE">Sweden</option>
    <option value="CH">Switzerland</option>
    <option value="SY">Syrian Arab Republic</option>
    <option value="TW">Taiwan, Province of China</option>
    <option value="TJ">Tajikistan</option>
    <option value="TZ">Tanzania, United Republic of</option>
    <option value="TH">Thailand</option>
    <option value="TL">Timor-Leste</option>
    <option value="TG">Togo</option>
    <option value="TK">Tokelau</option>
    <option value="TO">Tonga</option>
    <option value="TT">Trinidad and Tobago</option>
    <option value="TN">Tunisia</option>
    <option value="TR">Turkey</option>
    <option value="TM">Turkmenistan</option>
    <option value="TC">Turks and Caicos Islands</option>
    <option value="TV">Tuvalu</option>
    <option value="UG">Uganda</option>
    <option value="UA">Ukraine</option>
    <option value="AE">United Arab Emirates</option>
    <option value="GB">United Kingdom</option>
    <option value="US">United States</option>
    <option value="UM">United States Minor Outlying Islands</option>
    <option value="UY">Uruguay</option>
    <option value="UZ">Uzbekistan</option>
    <option value="VU">Vanuatu</option>
    <option value="VE">Venezuela</option>
    <option value="VN">Viet Nam</option>
    <option value="VG">Virgin Islands, British</option>
    <option value="VI">Virgin Islands, U.s.</option>
    <option value="WF">Wallis and Futuna</option>
    <option value="EH">Western Sahara</option>
    <option value="YE">Yemen</option>
    <option value="ZM">Zambia</option>
    <option value="ZW">Zimbabwe</option>
</select>